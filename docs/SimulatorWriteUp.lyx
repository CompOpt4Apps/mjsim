#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
AVR Simulator
\end_layout

\begin_layout Author
Ryan Moore - Colorado State University
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Overview
\end_layout

\begin_layout Standard
The AVR Simulator is designed to simulate the minimal number of instructions
 that is required to program the MeggyJr RGB device.
 The simulator can either run in a batch mode, where the assembly program
 will run to completion or till a system imposed hop count occurs, or in
 a gui mode where there is visualization for the stack, heap, registers
 and program space (there is a planned update to include a visualization
 of the actual device with button presses).
 The simulator is entirely written in Java and uses several open source
 api's.
 The simulator is distributed as an executable jar and does not require
 any other files/libraries in order to run.
\end_layout

\begin_layout Section*
Using the Simulator
\end_layout

\begin_layout Standard
In order to use the simulator you must invoke the java jvm with the jar
 option:
\end_layout

\begin_layout Standard
java -jar MJSIM.jar
\end_layout

\begin_layout Standard
This will invoke the java jvm and execute the simulator in gui mode.
 The default behavior is to load the gui, and then a user can open an assembly
 file within the application, and then step through, or run, the assembly
 program.
 The default behavior can be modified with different command line options.
 The most important of these is the batch mode option and the file option.
 To invoke the simulator in batch mode add the -b option after MJSIM.jar:
\end_layout

\begin_layout Standard
java -jar MJSIM.jar -b
\end_layout

\begin_layout Standard
This command will invoke the simulator in batch mode.
 This however will not run.
 When executing the simulator in batch mode a file is required as well.
\end_layout

\begin_layout Standard
java -jar MJSIM.jar -b -f assem.s
\end_layout

\begin_layout Standard
This command will execute the simulator in batch mode and will load and
 run the program in assem.s.
 There are some other command line options that can be used to modify the
 behavior of the simulator.
 They can all be found my invoking the simulator with the -h option.
\end_layout

\begin_layout Standard
Some of the additional options include optional debugging output.
 This output is written to the console as well as an output file named,
 output.log.
 This file can be used for additional debugging of an assembly program,
 but it is really meant for debugging the simulator.
 If there is ever an error in the simulator this output can be invaluable
 in determining what went wrong.
 If such an event occurs email moorer@cs.colostate.edu with the log file and
 assembly file and a description of what you did to encounter the error
 and I will attempt to reproduce it and then correct the error.
 If there are ever any other questions do not hesitate to e-mail me.
\end_layout

\begin_layout Section*
Supported Instructions
\end_layout

\begin_layout Standard
The following avr instructions are supported in the simulator.
 If you want additional information on any of these instructions please
 refer to the avr instruction set writeup - http://www.atmel.com/dyn/resources/pro
d_documents/doc0856.pdf.
\end_layout

\begin_layout Itemize
adc
\end_layout

\begin_layout Itemize
add
\end_layout

\begin_layout Itemize
and
\end_layout

\begin_layout Itemize
breq
\end_layout

\begin_layout Itemize
brlo
\end_layout

\begin_layout Itemize
brlt
\end_layout

\begin_layout Itemize
call
\end_layout

\begin_layout Itemize
cp
\end_layout

\begin_layout Itemize
eor
\end_layout

\begin_layout Itemize
in
\end_layout

\begin_layout Itemize
jmp
\end_layout

\begin_layout Itemize
ldi
\end_layout

\begin_layout Itemize
ld
\end_layout

\begin_layout Itemize
lds
\end_layout

\begin_layout Itemize
mov
\end_layout

\begin_layout Itemize
muls
\end_layout

\begin_layout Itemize
neg
\end_layout

\begin_layout Itemize
or
\end_layout

\begin_layout Itemize
pop
\end_layout

\begin_layout Itemize
push
\end_layout

\begin_layout Itemize
ret
\end_layout

\begin_layout Itemize
sbc
\end_layout

\begin_layout Itemize
st
\end_layout

\begin_layout Itemize
sub
\end_layout

\begin_layout Itemize
tst
\end_layout

\begin_layout Section*
Referenced APIs
\end_layout

\begin_layout Itemize
Apache Commons CLI
\end_layout

\begin_layout Itemize
Apache log4j
\end_layout

\begin_layout Itemize
Apache Pivot
\end_layout

\begin_layout Itemize
OneJar
\end_layout

\end_body
\end_document
