#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
MeggyJava: Making the Compilers Course More Attractive to Undergraduate
 Students
\end_layout

\begin_layout Author
Ryan Moore
\end_layout

\begin_layout Date
September 2, 2010
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Interest in the Topic
\end_layout

\begin_layout Standard
Compiler construction is an important area in Computer Science.
 Compilers are software packages that will compile(reduce) a higher level
 programming language to a machine language which computers understand and
 can run.
 Compilers have a great impact on how fast a program can run.
 If a compiler is not designed well it can produce code that is slow or
 incorrect, which makes compiler construction an important topic.
 Unfortunately many undergraduate students do not find the area interesting
 due either to the large amount of programming involved, or because they
 do not see how the skills learned in compilers are relevant to software
 development in general.
 I myself was not originally attracted to the idea of writing compilers
 mostly due to how much programming would be required, but after my adviser
 and I had identified this project I signed up for the compiler course the
 next day and loved the course.
 From a purely theoretical and intellectual standpoint, I found writing
 compilers very satisfying.
 It ties together a lot of theory with concrete examples.
 It ties together how good software engineering techniques can be used with
 actual Computer Science theory.
 It really makes all of the previous classes mean something, even the classes
 that you never thought would be useful outside of the classroom.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename meggyJr.jpg
	scale 60

\end_inset


\end_layout

\begin_layout Section*
Project Scope
\end_layout

\begin_layout Standard
To make compilers more interesting I am going to modify the main project
 in the course so that instead of writing a compiler that generates MIPS
 assembly code the course will now write a compiler that generates AVR assembly
 code, which will run on the Evil Mad Scientist Laboratories Meggy Jr game
 platform.
 The Meggy Jr looks similar to a GameBoy handheld system but with a 8 by
 8 LED screen instead of a full screen.
 The reason for the switch is that currently when students generate MIPS
 assembly they can only run it inside the MARS Simulator.
 The students do not see their code doing anything particularly interesting
 on an actual machine.
 By making the main project target a machine where they can run their code
 after generating it, and see it work, will make the course more interesting
 and attract more undergraduate students.
\end_layout

\begin_layout Section*
Tasks To Support Project
\end_layout

\begin_layout Standard
There are several different major tasks that need to be completed to support
 the changes to the course project.
\end_layout

\begin_layout Enumerate
The first major task is to create a tool-chain, or build process, that students
 will use to compile their generated assembly code into an executable that
 will be uploaded to a Meggy Jr.
 This will include finding all the correct source files that target the
 Meggy Jr, as well as finding and installing a compiler that will assemble
 the generated assembly code into an executable.
 The final process is to then make it easy enough so that students can take
 their generated assembly and pass it into the tool-chain.
\end_layout

\begin_layout Enumerate
The next major task is to update the reference compiler that is used in
 the course to generate AVR assembly instead of MIPS assembly code.
 In addition to converting everything to AVR some new instructions will
 need to be added to the MiniJava language to support the new Meggy functions
 for editing the display state of the Meggy Jr as well as reading button
 presses from the Meggy Jr.
\end_layout

\begin_layout Enumerate
The last major task is to implement a simulator that will be used for grading
 as well as allowing students to debug the assembly code generated by their
 compiler before uploading it to the Meggy Jr device.
 The simulator will allow students to interactively step through their generated
 assembly code and watch to see what happens as each instruction is ran.
 This is the most important step because without this there is no way to
 accurately grade all of the student's compilers in a reasonable amount
 of time due to differences in the generated assembly.
 The simulator will allow for the generated assembly programs to be ran
 in a batch mode where the programs are ran to completion so that grading
 can be automated and the TA/Professor will not have to grade each generated
 assembly file by hand.
 This simulator will implement a subset of the AVR assembly such that students
 will be able to simulate what will happen on an actual device.
\end_layout

\begin_layout Section*
End Result
\end_layout

\begin_layout Standard
By the end of the project I will have modified the main project in the Compiler
 course to make it more interesting to undergraduate students, who may not
 otherwise want to take the course.
 In support of this I will have created a tool-chain that will take a AVR
 assembly file and build it into an executable that can be loaded onto a
 Meggy Jr.
 In addition to this I will provide a simulator that will simulate AVR assembly
 so that student's will be able to locally test their programs before they
 upload it to a Meggy Jr.
 The simulator will also be used to grade the student's compilers by checking
 the assembly code that they generate.
 The last part that will be completed is to update the reference compiler
 to include the new Meggy Jr instructions as well as compiling to AVR instead
 of MIPS assembly.
\end_layout

\begin_layout Section*
Time Line
\end_layout

\begin_layout Itemize
Tool-Chain Completed - September 8, 2010
\end_layout

\begin_layout Itemize
Constant Expressions - September 14, 2010
\end_layout

\begin_layout Itemize
Function Calls - September 22, 2010
\end_layout

\begin_layout Itemize
Simulator Batch Mode - September 29, 2010
\end_layout

\begin_layout Itemize
Control Flow Constructs - October 6, 2010
\end_layout

\begin_layout Itemize
Basic Simulator Gui - October 13, 2010
\end_layout

\begin_layout Itemize
Classes And Arrays - October 20, 2010
\end_layout

\begin_layout Itemize
Penultimate Draft/Reflection Paper - Will Present to Thesis Adviser and
 Committee Member on October 20, 2010
\end_layout

\begin_layout Itemize
Stepping and Breakpoint Control in Simulator - November 6, 2010
\end_layout

\begin_layout Itemize
Oral Presentation - November 12, 2010 Computer Science Building 345 4:00pm
 - 5:00pm 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Resources
\end_layout

\begin_layout Itemize
Michelle Strout - Thesis Adviser and Compiler Professor
\end_layout

\begin_layout Itemize
Current CS453 Website - Outline of Compiler Development Iterations - http://www.c
s.colostate.edu/~cs453
\end_layout

\begin_layout Itemize
MiniJava Grammar Web page - Description of the MiniJava Language - http://www.cam
bridge.org/resources/052182060X/MCIIJ2e/grammar.htm
\end_layout

\begin_layout Itemize
ATmega328p Feature Document - Outline of the AVR Instruction Set and the
 Major Features of the Atmega328p processor - http://www.atmel.com/dyn/resources/p
rod_documents/8271S.pdf
\end_layout

\begin_layout Itemize
ATmega328p In-depth Feature Document - Full Description of Instruction Set
 and Processor Design - http://www.atmel.com/dyn/resources/prod_documents/doc8271.p
df
\end_layout

\begin_layout Itemize
Meggy Jr Web page - Description of Meggy Jr - http://www.evilmadscientist.com/arti
cle.php/meggyjr
\end_layout

\end_body
\end_document
